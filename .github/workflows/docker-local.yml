name: Auto Merge, Build, and Deploy to Docker Hub

on:
  pull_request:
    types:
      - closed
    branches:
      - dev
  schedule:
    - cron: '05 15 * * *'  # 매일 00:05 (KST 기준)
  workflow_dispatch:  # 수동 실행 가능

permissions:
  contents: write
  pull-requests: write

jobs:
  auto_merge_build_deploy:
    if: github.ref == 'refs/heads/dev'  # dev 브랜치에서만 실행
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure Git
        env:
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
        run: |
          git config --global user.email "$GIT_USER_EMAIL"
          git config --global user.name "$GIT_USER_NAME"

      - name: Check for new commits in feat/* branches
        id: check_commits
        run: |
          git fetch --all
          NEW_COMMITS_COUNT=$(git rev-list --count --remotes="origin/feat/*" --not origin/dev)
          if [ "$NEW_COMMITS_COUNT" -eq 0 ]; then
            echo "has_new_commits=false" >> $GITHUB_ENV
          else
            echo "has_new_commits=true" >> $GITHUB_ENV
          fi

      - name: Create or Find PRs from feat/* branches to dev
        if: env.has_new_commits == 'true'
        env:
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          git for-each-ref --format '%(refname:short)' refs/remotes/origin/feat/* | while read -r TARGET_BRANCH; do
            TARGET_BRANCH=${TARGET_BRANCH#origin/}
            PR_URL=$(gh pr list --base dev --head "$TARGET_BRANCH" --json url --jq '.[0].url' || echo "")
            if [ -z "$PR_URL" ]; then
              PR_URL=$(gh pr create --base dev --head "$TARGET_BRANCH" --title "Auto merge $TARGET_BRANCH into dev" --body "자동 생성된 Pull Request" || echo "")
            fi
          done

      - name: Auto-merge pull requests
        if: env.has_new_commits == 'true'
        env:
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          git for-each-ref --format '%(refname:short)' refs/remotes/origin/feat/* | while read -r TARGET_BRANCH; do
            TARGET_BRANCH=${TARGET_BRANCH#origin/}
            PR_URL=$(gh pr list --base dev --head "$TARGET_BRANCH" --json url --jq '.[0].url' || echo "")
            if [ -n "$PR_URL" ]; then
              gh pr merge "$PR_URL" --merge || echo "Merge failed for $PR_URL."
            fi
          done

      - name: Log in to Docker Hub
        if: env.has_new_commits == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set environment variables from secrets to .env file
        run: |
          echo "REACT_APP_KAKAO_CLIENT_ID=${{ secrets.REACT_APP_KAKAO_CLIENT_ID }}" >> .env
          echo "REACT_APP_KAKAO_AUTH_CODE_PATH=${{ secrets.REACT_APP_KAKAO_AUTH_CODE_PATH }}" >> .env
          echo "REACT_APP_KAKAO_REDIRECT_URI=${{ secrets.REACT_APP_KAKAO_REDIRECT_URI }}" >> .env
          echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}" >> .env
          echo "REACT_APP_GOOGLE_AUTH_CODE_PATH=${{ secrets.REACT_APP_GOOGLE_AUTH_CODE_PATH }}" >> .env
          echo "REACT_APP_GOOGLE_REDIRECT_URI=${{ secrets.REACT_APP_GOOGLE_REDIRECT_URI }}" >> .env
          echo "REACT_APP_GITHUB_CLIENT_ID=${{ secrets.REACT_APP.GITHUB_CLIENT_ID }}" >> .env
          echo "REACT_APP_GITHUB_AUTH_CODE_PATH=${{ secrets.REACT_APP.GITHUB_AUTH_CODE_PATH }}" >> .env
          echo "REACT_APP_URI=${{ secrets.REACT_APP_LOCAL_URI }}" >> .env
          echo "REACT_APP_SPRING_URI=${{ secrets.REACT_APP_SPRING_LOCAL_URI }}" >> .env
          echo "REACT_APP_ML_URI=${{ secrets.REACT_APP.ML_LOCAL_URI }}" >> .env

      - name: Build and push Docker image to Docker Hub
        run: |
          git fetch origin dev
          git checkout dev
          git pull origin dev
          export DOCKER_TAG=${{ secrets.DOCKER_USERNAME }}/narrativa_front:latest
          docker build -f dockerfile.local -t $DOCKER_TAG . \
            --build-arg REACT_APP_KAKAO_CLIENT_ID=${{ secrets.REACT_APP_KAKAO_CLIENT_ID }} \
            --build-arg REACT_APP_KAKAO_AUTH_CODE_PATH=${{ secrets.REACT_APP_KAKAO_AUTH_CODE_PATH }} \
            --build-arg REACT_APP_KAKAO_REDIRECT_URI=${{ secrets.REACT_APP.KAKAO_REDIRECT_URI }} \
            --build-arg REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }} \
            --build-arg REACT_APP_GOOGLE_AUTH_CODE_PATH=${{ secrets.REACT_APP_GOOGLE_AUTH_CODE_PATH }} \
            --build-arg REACT_APP_GOOGLE_REDIRECT_URI=${{ secrets.REACT_APP.GOOGLE_REDIRECT_URI }} \
            --build-arg REACT_APP_GITHUB_CLIENT_ID=${{ secrets.REACT_APP.GITHUB_CLIENT_ID }} \
            --build-arg REACT_APP_GITHUB_AUTH_CODE_PATH=${{ secrets.REACT_APP.GITHUB_AUTH_CODE_PATH }} \
            --build-arg REACT_APP_URI=${{ secrets.REACT_APP_LOCAL_URI }} \
            --build-arg REACT_APP_SPRING_URI=${{ secrets.REACT_APP_SPRING_LOCAL_URI }} \
            --build-arg REACT_APP_ML_URI=${{ secrets.REACT_APP.ML_LOCAL_URI }}
          docker push $DOCKER_TAG

    outputs:
      has_new_commits: ${{ env.has_new_commits }}

  deploy_local:
    runs-on: self-hosted
    needs: auto_merge_build_deploy
    if: github.ref == 'refs/heads/dev' 
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Stop and remove existing container
        shell: powershell
        run: |
          $containers = docker ps -q --filter "name=narrativa_front"
          if ($containers) {
            docker stop $containers
            docker rm $containers
          }

      - name: Remove old Docker image
        shell: powershell
        run: |
          $images = docker images --filter "reference=${{ secrets.DOCKER_USERNAME }}/narrativa_front" -q
          if ($images) {
            docker rmi $images
          }

      - name: Pull new Docker image
        shell: powershell
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/narrativa_front:latest

      - name: Run new Docker container
        shell: powershell
        run: |
          docker run -d --name narrativa_front `
            -p 3010:3010 `
            --env-file .env `
            ${{ secrets.DOCKER_USERNAME }}/narrativa_front:latest
